# coding: utf-8

import sys
import json
import random

map_name_idx = sys.argv[1]
map_name = map_name_idx[5:]
map_path = "pokeemerald/data/maps/x%s/map.json" % map_name_idx
map_scripts_path = "scripts/%s.s" % map_name_idx
map_name = map_name.replace("-","_")

def mk_test_script(x):
    return '%s:\n    lock\n    faceplayer\n    msgbox %s_Text\n    release\n    end\n\n%s_Text:\n    .string "redacted$"' % (x, x, x)

out_script = []
def outs(l=None):
    if l is None:
        l = ""
    out_script.append(l)

with open(map_path, "r") as f:
    map_data = json.load(f)

with open("pokeemerald/data/layouts/layouts.json", "r") as f:
    layouts_data = json.load(f)
layouts = {}
for layout in layouts_data["layouts"]:
    layouts[layout["id"]] = layout

if '--fixup' in sys.argv:
    print("operating in fixup mode")
    for i in range(0, len(map_data["warp_events"])):
        if 'dir' not in map_data["warp_events"][i]:
            map_data["warp_events"][i]['dir'] = 'u'
        if 'tx' not in map_data["warp_events"][i]:
            map_data["warp_events"][i]['tx'] = '0'
        if 'ty' not in map_data["warp_events"][i]:
            map_data["warp_events"][i]['ty'] = '0'
    ctr = 1
    for i in range(0, len(map_data["object_events"])):
        if map_data['object_events'][i]['script'] == 'NULL':
            map_data['object_events'][i]['script'] = map_name + "_Script" + str(ctr)
            ctr += 1
    for i in range(0, len(map_data["coord_events"])):
        if map_data['coord_events'][i]['script'] == 'NULL':
            map_data['coord_events'][i]['script'] = map_name + "_Script" + str(ctr)
            ctr += 1
    for i in range(0, len(map_data["bg_events"])):
        if map_data['bg_events'][i]['script'] == 'NULL':
            map_data['bg_events'][i]['script'] = map_name + "_Script" + str(ctr)
            ctr += 1
    with open(map_path, "w") as f:
        json.dump(map_data, f)
    with open(map_scripts_path, "r", encoding='utf-8') as f:
        map_scripts = f.read()
    if '.align 4' not in map_scripts:
        map_scripts = ".align 4\n\n" + map_scripts
    map_data['object_events'].sort(key=lambda x: x['script'])
    map_data['coord_events'].sort(key=lambda x: x['script'])
    map_data['bg_events'].sort(key=lambda x: x['script'])
    for s in map_data['object_events']:
        if (s['script'] + ":") not in map_scripts:
            map_scripts += "\n\n" + mk_test_script(s['script'])
    for s in map_data['coord_events']:
        if (s['script'] + ":") not in map_scripts:
            map_scripts += "\n\n" + mk_test_script(s['script'])
    for s in map_data['bg_events']:
        if (s['script'] + ":") not in map_scripts:
            map_scripts += "\n\n" + mk_test_script(s['script'])
    with open(map_scripts_path, "w", encoding='utf-8') as f:
        f.write(map_scripts)
    sys.exit(0)

with open(map_scripts_path, "r", encoding='utf-8') as f:
    map_scripts = f.read()

protected_coords = []
enable_wtw_prot = True

for l in map_scripts.split("\n"):
    if 'setmetatile' in l:
        try:
            l = l.strip().replace("setmetatile", ",").split(",")
            lx = int(l[1].strip())
            ly = int(l[2].strip())
            protected_coords.append((lx, ly))
        except:
            print("wtw protection disabled due to exception")
            enable_wtw_prot = False

outs("# fools2022 - autogenerated map file, please do not change!")
outs("# created from: %s" % map_path)
outs()

outs(".thumb")
outs('.include "include/constants.inc"')
outs(".org MAP_LOAD_BASE")
outs()

outs('.include "include/macros.inc"')
outs('.include "include/symbols.inc"')
outs('.include "include/map.inc"')
outs('.include "include/event.inc"')
outs('.include "include/save.inc"')
outs()

outs("%s_MapHeader:" % map_name)
outs("    .word %s_MapLayout" % map_name)
outs("    .word %s_MapEvts" % map_name)
outs("    .word NULL")
outs("    .word NULL")
outs("    .hword %s" % map_data["music"])
outs("    .hword 0")
outs("    .byte 0")
outs("    .byte %i" % int(map_data["requires_flash"]))
outs("    .byte %s" % map_data["weather"])
outs("    .byte 0")
outs("    .hword 0")
outs("    map_header_flags allow_cycling=%i, allow_escaping=%i, allow_running=%i, show_map_name=%i" % (
    int(map_data["allow_cycling"]),
    int(map_data["allow_escaping"]),
    int(map_data["allow_running"]),
    int(map_data["show_map_name"])
))
outs("    .byte 0")
outs("    # additional data specific to fools2022 maps")
outs("    .word %s_MapInitCode+1" % map_name)
outs("    .word %s_MapConnections" % map_name)
outs("    .word %s_MapInitScript" % map_name)
outs("    .word %s_MapName" % map_name)
if 'mus' in map_data:
    outs("    .word %s" % map_data['mus'])
else:
    outs("    .word 0x2819")
outs()

layout = layouts[map_data["layout"]]

outs("%s_MapLayout:" % map_name)
outs("    .word %i" % layout["width"])
outs("    .word %i" % layout["height"])
outs("    .word %s_MapBorder" % map_name)
outs("    .word %s_MapData" % map_name)
outs("    .word %s" % layout["primary_tileset"])
outs("    .word %s" % layout["secondary_tileset"])
outs()

idx = 1
outs(".align 4")
outs("%s_MapObjectEvents:" % map_name)
for obj in map_data["object_events"]:
    outs("    object_event %i, %s, 0, %i, %i, %i, %s, %i, %i, %s, %i, %s, %s" % (
        idx,
        obj["graphics_id"],
        int(obj["x"]),
        int(obj["y"]),
        int(obj["elevation"]),
        obj["movement_type"],
        int(obj["movement_range_x"]),
        int(obj["movement_range_y"]),
        obj["trainer_type"],
        int(obj["trainer_sight_or_berry_tree_id"]),
        obj["script"],
        obj["flag"]
    ))
    idx += 1
outs()

idx = 1
outs(".align 4")
outs("%s_MapCoordEvents:" % map_name)

for evt in map_data["coord_events"]:
    if evt["type"] != "trigger":
        raise RuntimeError("cannot encode coord event %i (type %s)" % (idx, evt["type"]))
    outs("    coord_event %i, %i, %i, %s, %s, %s" % (
        int(evt["x"]),
        int(evt["y"]),
        int(evt["elevation"]),
        evt["var"],
        evt["var_value"],
        evt["script"]
    ))
outs("%s_WarpCoordEvents:" % map_name)
for evt in map_data["warp_events"]:
    outs("    coord_event %i, %i, %i, %s, %s, %s" % (
        int(evt["x"]),
        int(evt["y"]),
        0,
        "SCRIPT_WARP_TRIGGER",
        0,
        "WARP_SCRIPT"
    ))

outs()

idx = 1
outs(".align 4")
outs("%s_MapBGEvents:" % map_name)

for evt in map_data["bg_events"]:
    if evt["type"] != "sign":
        raise RuntimeError("cannot encode bg event %i (type %s)" % (idx, evt["type"]))
    outs("    bg_event %i, %i, %i, %s, %s" % (
        int(evt["x"]),
        int(evt["y"]),
        int(evt["elevation"]),
        evt["player_facing_dir"],
        evt["script"]
    ))
outs()

outs(".align 4")
outs("%s_MapEvts:" % map_name)
outs("    map_events %i, %s_MapObjectEvents, 0, 0, %i, %s_MapCoordEvents, %i, %s_MapBGEvents" % (
    len(map_data["object_events"]), map_name,
    len(map_data["coord_events"]) + len(map_data["warp_events"]), map_name,
    len(map_data["bg_events"]), map_name
))
outs()

with open("pokeemerald/%s" % layout["border_filepath"], "rb") as f:
    border_data = f.read()
with open("pokeemerald/%s" % layout["blockdata_filepath"], "rb") as f:
    block_data = f.read()

outs(".align 4")
outs("%s_MapBorder:" % map_name)
l = []
for i in border_data:
    l.append("0x%.2x" % i)
outs("    .byte %s" % ", ".join(l))
outs()

outs(".align 4")
outs("%s_MapData:" % map_name)
l = []
for i in range(0, len(block_data), 2):
    # elevation hax to protect against basic WTW
    tx = (i // 2) % layout["width"]
    ty = (i // 2) // layout["width"]
    bd = block_data[i] + block_data[i+1]*256
    if (tx, ty) not in protected_coords and enable_wtw_prot:
        if (bd >> 10) & 0xff == 1:
            bd = bd & 0xfff
            bd |= random.choice([0xa000, 0xb000, 0xc000])
    else:
        pass
        # print("%i,%i is excluded from anti-WTW (reason: setmetatile)" % (tx, ty))
    l.append("0x%.4x" % bd)
    if len(l) >= layout["width"]:
        outs("    .hword %s" % ", ".join(l))
        l = []
outs()

'''
outs(".align 4")
outs("%s_MapInitCode:" % map_name)
outs("    bx lr")
outs()
'''

outs(".align 4")
outs("%s_MapConnections:" % map_name)
for evt in map_data["warp_events"]:
    dir_bits = (0, 0)
    if "dir" in evt:
        if evt["dir"].lower() == 'u':
            dir_bits = (0, 1)
        if evt["dir"].lower() == 'l':
            dir_bits = (1, 0)
        if evt["dir"].lower() == 'r':
            dir_bits = (1, 1)
    else:
        print("warning: dir not in warp_event %i,%i; falling back to DOWN" % (evt['x'], evt['y']))
    try:
        if "connected_map" in evt:
            outs("    .hword %s" % evt['connected_map'])
        else:
            dest_map_pos = evt["dest_map"].find("X")
            dest_map = int(evt["dest_map"][dest_map_pos+1:dest_map_pos+5], 16)
            outs("    .hword %i" % dest_map)
    except:
        outs("    .hword %i" % evt["dest_warp_id"])
        print("warning: map not recognized warp_event %i,%i; falling back to %.4x" % (evt['x'], evt['y'], evt['dest_warp_id']))
    if "tx" not in evt:
        evt['tx'] = 0
        print("warning: tx not in warp_event %i,%i; falling back to 0" % (evt['x'], evt['y']))
    if "ty" not in evt:
        evt['ty'] = 0
        print("warning: ty not in warp_event %i,%i; falling back to 0" % (evt['x'], evt['y']))
    outs("    .byte %s, %s" % (int(evt["tx"]) + dir_bits[0]*0x80, int(evt["ty"]) + dir_bits[1]*0x80))
outs()

outs(".align 4")
outs("%s_MapName:" % map_name)
try:
    outs("    .string \"%s$\"" % map_data['n'])
except:
    print("warning: undefined map name")
    outs("    .string \"%s$\"" % map_data['name'].replace("_","n"))
outs()

outs("# %s" % map_scripts_path)
outs()
outs(map_scripts)
outs()

with open("maps/%s.s" % map_name_idx, "w") as f:
    f.write("\n".join(out_script))
